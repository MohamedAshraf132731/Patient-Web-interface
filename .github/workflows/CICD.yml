name: Deploy 1 tier app ITI test 
run-name: Deploy Feed Back by ${{ github.actor }} and Event is ${{ github.event_name }}

on: 
  push:
    branches:
      - main
jobs:
 CI-1tier-app:
  runs-on: ubuntu-latest
  steps:
  - name: clone repo
    uses: actions/checkout@v4
  - name: Install Python
    uses: actions/setup-python@v5
    with:
      python-version: '3.9' 

  - name: Install Requirements
    working-directory: ./project
    run: |
      python -m pip install --upgrade pip
       pip install -r requirements.txt

  - name: Test Linting 
    working-directory: ./project
    run: |
      pip install flake8
      flake8 .
    continue-on-error: true

  - name: Testing 
    run: | 
     pip install pytest
     PYTHONPATH=./project pytest
    continue-on-error: true
  - name: docker login 
    uses: docker/login-action@v3
    with:
      username: ${{ vars.DOCKERHUB_USERNAME }}
      password: ${{ secrets.DOCKERHUB_TOKEN }}
  - name: Build and push
    uses: docker/build-push-action@v6
    with:
        context: ./project
        push: true
        tags: mohamedashraf3/mohamedashraf:test 
        #({{ github.run_number }}
 CD:
    runs-on: ubuntu-latest
    needs:
      - CI-1tier-app
    steps:
      - name: clone repo
        uses: actions/checkout@v4

      - name: Save SSH Private Key
        run: |
         echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
         chmod 600 key.pem    
      - name: Install Minikube on EC2 and Deploy App
        run: |
          # 1. Copy app.yaml to EC2
          scp -o StrictHostKeyChecking=no -i key.pem k8s/app.yaml ubuntu@3.92.6.74:/home/ubuntu/app.yaml

          # 2. SSH into EC2 and run full setup + deploy
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@3.92.6.74 << 'EOF'
            set -eux

            # Update and install required packages
            sudo apt update -y
            sudo apt install -y curl wget apt-transport-https conntrack git

            # Install CNI plugins
            CNI_VERSION="v1.3.0"
            wget https://github.com/containernetworking/plugins/releases/download/${CNI_VERSION}/cni-plugins-linux-amd64-${CNI_VERSION}.tgz
            sudo mkdir -p /opt/cni/bin
            sudo tar -C /opt/cni/bin -xzvf cni-plugins-linux-amd64-${CNI_VERSION}.tgz
            rm cni-plugins-linux-amd64-${CNI_VERSION}.tgz

            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl enable docker
            sudo systemctl start docker

            # Install cri-dockerd binary
            CRIDOCKERD_VERSION="0.3.1"
            wget https://github.com/Mirantis/cri-dockerd/releases/download/v${CRIDOCKERD_VERSION}/cri-dockerd-${CRIDOCKERD_VERSION}.amd64.tgz
            tar -xvf cri-dockerd-${CRIDOCKERD_VERSION}.amd64.tgz
            sudo mv cri-dockerd/cri-dockerd /usr/local/bin/
            rm -rf cri-dockerd*

            # Install cri-dockerd systemd service
            git clone https://github.com/Mirantis/cri-dockerd.git
            cd cri-dockerd/packaging/systemd
            sudo sed -i 's:/usr/bin/cri-dockerd:/usr/local/bin/cri-dockerd:g' cri-docker.service
            sudo cp cri-docker.socket cri-docker.service /etc/systemd/system
            sudo systemctl daemon-reexec
            sudo systemctl daemon-reload
            sudo systemctl enable cri-docker.service
            sudo systemctl enable cri-docker.socket
            sudo systemctl start cri-docker.service
            sudo systemctl start cri-docker.socket
            cd ~
            rm -rf cri-dockerd

            CRICTL_VERSION=1.29.0
            wget https://github.com/kubernetes-sigs/cri-tools/releases/download/v${CRICTL_VERSION}/crictl-v${CRICTL_VERSION}-linux-amd64.tar.gz
            sudo tar zxvf crictl-v${CRICTL_VERSION}-linux-amd64.tar.gz -C /usr/local/bin
            rm crictl-v${CRICTL_VERSION}-linux-amd64.tar.gz

            # Install Minikube
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            sudo install minikube-linux-amd64 /usr/local/bin/minikube

            # Install kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

            sudo sysctl fs.protected_regular=0
            
            # Start Minikube
            sudo minikube start --driver=none

            # Deploy app
            export KUBECONFIG=/etc/kubernetes/admin.conf
            sudo -E kubectl apply -f /home/ubuntu/app.yaml

            # Port forward (detached)
            sudo docker run -d --name actions1234 -p 6000:8000 mohamedashraf3/mohamedashraf:test
            sudo -E nohup kubectl port-forward service/service-web 8080:6000 > forward.log 2>&1 &
          EOF